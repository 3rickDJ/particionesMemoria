/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation libs.groovy.all

    // This dependency is used by the application.
    implementation libs.guava

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation libs.spock.core
    testImplementation libs.junit

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.SimuladorMemoria'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task generateInputFiles {
    doLast {
        // Ejecutar el script de Groovy externo para generar el archivo de entrada
        def scriptFile = file("scripts/GenerateInputFiles.groovy")
        if (scriptFile.exists()) {
            // Ejecutar el script usando el motor de scripts de Groovy
            groovyScript(scriptFile)
        } else {
            throw new FileNotFoundException("No se encontró el script de generación de archivos: ${scriptFile.path}")
        }
    }
}

// Definir un método para ejecutar scripts de Groovy
void groovyScript(File scriptFile) {
    def groovyShell = new GroovyShell()
    groovyShell.setVariable('project', project) // Pasar la referencia del proyecto a GroovyShell
    groovyShell.evaluate(scriptFile)
}

